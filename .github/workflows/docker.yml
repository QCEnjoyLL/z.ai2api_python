# .github/workflows/docker-publish.yml

# 工作流名称
name: Docker Build and Push Multi-Arch

# 工作流触发器
on:
  push:
    branches: [ "master" ] # 当代码推送到 master 分支时触发
  workflow_dispatch: # 允许手动触发

# 定义一个任务（Job）
jobs:
  build-and-push:
    # 任务名称
    name: Build and Push to Docker Hub
    # 运行环境
    runs-on: ubuntu-latest

    # 任务步骤
    steps:
      # 1. 检出代码
      # 拉取你的仓库代码到 Actions 的运行环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 设置 QEMU
      # QEMU 是一个模拟器，让我们可以跨架构构建 Docker 镜像
      # 例如在 amd64 的机器上构建 arm64 的镜像
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. 设置 Docker Buildx
      # Buildx 是 Docker 的一个插件，提供了更高级的构建功能，特别是多架构构建
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # 4. 登录到 Docker Hub
      # 使用你之前在 GitHub Secrets 中配置的用户名和 Access Token
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. 提取元数据（标签和注释）
      # 自动生成镜像标签，例如 'latest', 'v1.1.0', 'sha-abcdef'
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/z-ai2api # <-- ！！！重要：替换为你的镜像名
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            # 增加一个固定的 'latest' 标签
            type=raw,value=latest,enable=true

      # 6. 构建并推送到 Docker Hub
      # 这是核心步骤，它会执行构建并上传
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile 的上下文路径，. 代表仓库根目录
          file: ./Dockerfile # Dockerfile 在项目根目录
          push: true # 设置为 true 才会推送到 Docker Hub
          tags: ${{ steps.meta.outputs.tags }} # 使用上一步生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用上一步生成的元数据
          platforms: linux/amd64,linux/arm64 # 支持多架构：amd64 和 arm64
          cache-from: type=gha # 启用 GitHub Actions 的构建缓存
          cache-to: type=gha,mode=max # 将构建缓存写回，加速后续构建